(defun solve (input window)
  (let ((state (vector 26 0)))
    (macrolet ((char-count-at (idx) ^[state (- [input ,idx] #\a)]))
      (each ((i (range* 0 window))) (inc (char-count-at i)))
      (each ((i (range* window (length input))))
        (inc (char-count-at i))
        (when (all (range* (- i window) i) (op = 1 (char-count-at @1)))
          (return (+ i 1)))
        (dec (char-count-at (- i window)))))))

(let ((input (get-line)))
  (put-line `Part1: @(solve input (- 4 1))`)
  (put-line `Part2: @(solve input (- 14 1))`))
